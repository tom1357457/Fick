#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#define MAXSIZE 50
using namespace std;

typedef int ElemType;
//建立顺序表
typedef struct
{
	ElemType Data[MAXSIZE];
	int length;
}SqList;
//顺序表初始化
void InitList(SqList* &L)
{
	L = (SqList*)malloc(sizeof(SqList));
	L->length = 0;
}

//顺序表插入
void ListInsert(SqList*& L,int i,ElemType e)
{
	if (i<1 || i>L->length + 1 || L->length == MAXSIZE)
		return;
	for (int j = L->length - 1; j >= i - 1; j--)
	{
		L->Data[j + 1] = L->Data[j];
	}
	L->Data[i-1] = e;
	L->length++;
}

//输出顺序表
void DispList(SqList*& L)
{
	for (int i = 0; i < L->length; i++)
	{
		cout << L->Data[i] << " ";
	}
	cout << endl;
}

//输出顺序表的长度
void ListLength(SqList*& L)
{
	cout << "该线性表的长度为:" << L->length << endl;
}

//销毁顺序表
void DestoryList(SqList*& L)
{
	free(L);
}

//有序表的二路归并算法
void UnionList(SqList* La, SqList* Lb, SqList*& Lc)
{
	int k = 0;
	int i = 0, j = 0;
	InitList(Lc);
	while (i < La->length && j < Lb->length)
	{
		if (La->Data[i] < Lb->Data[j])
		{
			Lc->Data[k] = La->Data[i];
			i++;
			k++;
		}
		else
		{
			Lc->Data[k] = Lb->Data[j];
			j++;
			k++;
		}
	}
	while (i < La->length)
	{
		Lc->Data[k] = La->Data[i];
		i++;
		k++;
	}
	while (j < Lb->length)
	{
		Lc->Data[k] = Lb->Data[j];
		j++;
		k++;
	}
	Lc->length = k;
}
int main()
{
	SqList* L,*La,*Lb;
	InitList(La);
	ListInsert(La, 1, 1);
	ListInsert(La, 2, 3);
	ListInsert(La, 3, 5);

	InitList(Lb);
	ListInsert(Lb, 1, 2);
	ListInsert(Lb, 2, 4);
	ListInsert(Lb, 3, 6);
	ListInsert(Lb, 4, 8);

	InitList(L);
	UnionList(La, Lb, L);
	DispList(L);
	ListLength(L);
	
	DestoryList(La);
	DestoryList(Lb);
	DestoryList(L);
	return 0;
}
