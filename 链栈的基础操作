#include <iostream>
#include <malloc.h>
using namespace std;

typedef int ElemType;
//定义链栈
typedef struct LinkStNode
{
	ElemType data;
	struct LinkStNode* next;
}LinkStNode;
//初始化链栈
void InitStack(LinkStNode*& s)
{
	s = (LinkStNode*)malloc(sizeof(LinkStNode));
	s->next = NULL;
}
//销毁链栈
void DestoryStack(LinkStNode*& s)
{
	LinkStNode* pre, * p;
	pre = s;
	p = s->next;
	while (p != NULL)
	{
		free(pre);
		pre = p; 
		p = pre->next;
	}
	free(pre);
}

//判断链栈是否为空
bool StackEmpty(LinkStNode* s)
{
	return (s->next == NULL);
}
//进栈
void Push(LinkStNode*& s,ElemType e)
{
	LinkStNode* p;
	p = (LinkStNode*)malloc(sizeof(LinkStNode));
	p->data = e;
	p->next = s->next;
	s->next = p;
}
//出栈
void Pop(LinkStNode*& s, ElemType& e)
{
	LinkStNode* p;
	if (s->next = NULL)//栈为空
		return;
	p = s->next;
	e = p->data;
	s->next = p->next;
	free(p);
}
//取栈顶元素
void GetTop(LinkStNode* s, ElemType& e)
{
	if (s->next == NULL)
		return;
	e = s->next->data;
}
int main()
{
	LinkStNode* s;
	ElemType e;
	InitStack(s);
	cout << StackEmpty(s) << endl;
	for (int i = 0; i < 5; i++)
	{
		Push(s, i);
	}
	cout << StackEmpty(s) << endl;
	while(!StackEmpty(s))
	{
		Pop(s, e);
		cout << e << " ";
	}
	DestoryStack(s);
	return 0;
}
