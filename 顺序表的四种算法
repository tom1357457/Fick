#include <iostream>
#include <malloc.h>
#define MAXSIZE 50
using namespace std;

typedef struct
{
	int data[MAXSIZE];
	int length;
}SqList;

void swap(int& a, int& b)
{
	int temp = a;
	a = b;
	b = temp;
}
void InitList(SqList*& L)
{
	L = (SqList*)malloc(sizeof(SqList));
	L->length = 0;
}
void InsertList(SqList*& L,int i,int e)
{
	if (i<1 || i>L->length+1 || L->length == MAXSIZE)
		return;
	for (int j = L->length - 1; j >= i-1; j--)
	{
		L->data[j + 1] = L->data[j];
	}
	L->data[i - 1] = e;
	L->length++;
}
void DisList(SqList*& L)
{
	for (int i = 0; i < L->length; i++)
	{
		cout << L->data[i] << ' ';
	}
	cout << endl;
}
//方法一
void delnode1(SqList*& L, int x)
{
	int k = 0;
	for (int i = 0; i < L->length; i++)
	{
		if (L->data[i] != x)
		{
			L->data[k] = L->data[i];
			k++;
		}
	}
	L->length = k;
}

//方法二
void delnode2(SqList*& L, int x)
{
	int k = 0;
	for (int i = 0; i < L->length; i++)
	{
		if (L->data[i] == x)
		{
			k++;	
		}
		else L->data[i - k] = L->data[i];
	}
	L->length = L->length - k;
}

void partition1(SqList*& L)
{
	int pivot = L->data[0];
	int i=0;
	int j = L->length-1;
	while (i < j)
	{
		while (i<j && L->data[j]>pivot)
		{
			j--;
		}
		while (i < j && L->data[i]<=pivot)
		{
			i++;
		}
		if(i<j)
		{
			swap(L->data[i], L->data[j]);
		}	
	}
	swap(L->data[0], L->data[i]);
}

void partion2(SqList*& L)
{
	int pivot = L->data[0];
	int i = 0;
	int j = L->length - 1;
	while (i < j)
	{
		while (i<j && L->data[j]>pivot)
		{
			j--;
		}
		L->data[i] = L->data[j];

		while (i < j && L->data[i] <= pivot)
		{
			i++;
		}
		L->data[j] = L->data[i];
	}
	L->data[i] = pivot;
}
int main()
{
	SqList* L;
	int a[] = { 7,5,2,6,8,2,6,2 };
	InitList(L);
	for(int i=1;i<=8;i++)
	{ 
		InsertList(L, i, a[i - 1]);
	}
	cout << "输出原线性表：" << endl;
	DisList(L);
	//delnode1(L, 2);
	//delnode2(L, 2);
	//partition1(L);
	partion2(L);
	cout << "输出修改后的线性表：" << endl;
	DisList(L);
	int c = 1, b = 2;
	return 0;
}
