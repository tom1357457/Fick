#include <iostream>
#include <malloc.h>
using namespace std;

#define MaxCol 10
typedef int ElemType;
//建立数据结点
typedef struct DList
{
	ElemType data[MaxCol];
	struct DList* next;
}DList;

//建立头结点
typedef struct HList
{
	int Row, Col;
	DList* next;
}HList;

//交互是创建单链表
void CreateTable(HList*& h)
{
	DList* s,*r;
	h = (HList*)malloc(sizeof(HList));
	h->next = NULL;
	cout << "表的行数：" << endl;
	cin >> h->Row;
	cout << "表的列数：" << endl;
	cin >> h->Col;
	for (int i = 0; i < h->Row; i++)
	{
		cout << "第" << i+1 << "行：" << endl;
		s = (DList*)malloc(sizeof(DList));
		for (int j = 0; j < h->Col; j++)
		{
			cin >> s->data[j];
		}
		if (h->next == NULL)
		{
			h->next = s;
			r = s;
		}
		else
		{
			r->next = s;
			r = s;
		}
		r->next = NULL;
	}
}

//销毁单链表
void DestoryTable(HList*& h)
{
	DList* p, * q;
	p = h->next;
	q = p->next;
	while (p != NULL)
	{
		free(p);
		p = q;
		q = p->next;
	}
	free(h);
}

//输出单链表
void DispTable(HList*& h)
{
	DList* p, * q;
	p = h->next;
	while (p != NULL)
	{
		q = p->next;
		for (int j = 0; j < h->Col; j++)
		{
			cout << p->data[j] << " ";
		}
		cout << endl;
		p = q;
	}
}

//两表连接合并
void LinkTable(HList*& h1, HList*& h2, HList*& h)
{
	DList* p, * q, * r,*s;
	int i, j;
	h = (HList*)malloc(sizeof(HList));
	h->Row = 0;
	h->Col = h1->Col + h2->Col;
	h->next = NULL;
	cout << "连接字段是：第1个表序号，第2个表序号：" << endl;
	cin >> i >> j;
	p = h1->next;
	while (p != NULL)
	{
		q = h2->next;//表2每次都要从头遍历
		while (q != NULL)
		{
			if (p->data[i - 1] == q->data[j - 1])
			{
				s = (DList*)malloc(sizeof(DList));
				for (int k = 0; k < h1->Col; k++)
				{
					s->data[k] = p->data[k];
				}
				for (int k = 0; k < h2->Col; k++)
				{
					s->data[k + h1->Col] = q->data[k];
				}
				if (h->next == NULL)
				{
					h->next = s;
					r=s; 
				}
				else
					{
						r->next = s;
				        r = s;
					}
				h->Row++;
			}
			q = q->next;
		}
		p = p->next;
	}
	r->next = NULL;
}
int main()
{
	HList* h1, * h2, * h;
	cout << "表1：" << endl;
	CreateTable(h1);
	cout << "表2：" << endl;
	CreateTable(h2);
	LinkTable(h1, h2, h);
	cout << "将表一表二合并：" << endl;
	DispTable(h);
	DestoryTable(h1);
	DestoryTable(h2);
	DestoryTable(h);
	return 0;
}
