#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#define MAXSIZE 50
using namespace std;

typedef int ElemType;
typedef struct
{
	ElemType Data[MAXSIZE];
	int length;
}SqList;

void InitList(SqList* &L)
{
	L = (SqList*)malloc(sizeof(SqList));
	L->length = 0;
}

void ListInsert(SqList*& L,int i,ElemType e)
{
	if (i<1 || i>L->length + 1 || L->length == MAXSIZE)
		return;
	for (int j = L->length - 1; j >= i - 1; j--)
	{
		L->Data[j + 1] = L->Data[j];
	}
	L->Data[i-1] = e;
	L->length++;
}

void DispList(SqList*& L)
{
	for (int i = 0; i < L->length; i++)
	{
		cout << L->Data[i] << " ";
	}
	cout << endl;
}

void ListEmpty(SqList*& L)
{
	if (L->length == 0)
		cout << "线性表为空" << endl;
	else cout << "线性表不为空" << endl;
}
void ListLength(SqList*& L)
{
	cout << "该线性表的长度为:" << L->length << endl;
}

void GetElem(SqList*& L, int i, ElemType &e)
{
	if (i<1 || i>L->length)
		return;
	e = L->Data[i - 1];
}
int LocateElem(SqList*& L, ElemType e)
{
	int t = 0;
	for (int i = 0; i < L->length; i++)
	{
		if (L->Data[i] == e)
		{
			return i + 1;
			t = 1;
			break;
		}
	}
	if (t == 0)
		return 0;
}

void ListDelete(SqList*& L, int i)
{
	if (i<1 || i>L->length)
		return;
	for (int j = i-1;j<L->length;j++)
	{
		L->Data[j] = L->Data[j+1];
	}
	L->length--;
}

void DestoryList(SqList*& L)
{
	free(L);
}
int main()
{
	SqList* L;
	InitList(L);
	ListEmpty(L);
	ListInsert(L, 1, 1);
	ListInsert(L, 2, 3);
	ListInsert(L, 3, 1);
	ListInsert(L, 4, 4);
	ListInsert(L, 5, 2);
	DispList(L);
	ListLength(L);
	ListEmpty(L);
	int e;
	GetElem(L, 3, e);
	cout << "L的第三个元素=" << e << endl;
	cout << "第一个值为1的元素的逻辑编号：" << LocateElem(L,1) << endl;
	cout << "L的位置4插入元素5" << endl;
	ListInsert(L, 4, 5);
	DispList(L);
	cout << "删除第3个元素" << endl;
	ListDelete(L, 3);
	DispList(L);
	cout << "销毁L" << endl;
	DestoryList(L);
	return 0;
}
